source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/src/load_libraries.r")
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/scripts/kaplan_meier.r")
km_fold <- paste(path_loader$get_path('OUT_FOLDER_MODELS'), .FS_TYPE, 'kaplan_meier', sep = '/')
dir_create(km_fold)
fname <- paste('ADDITIONAL_kaplan_meier', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot(km_ntp_sl, alg_name = 'a) NTP single-label')
dev.off()
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/src/biological_validation/biologicalPlots.r")
km_fold <- paste(path_loader$get_path('OUT_FOLDER_MODELS'), .FS_TYPE, 'kaplan_meier', sep = '/')
dir_create(km_fold)
fname <- paste('ADDITIONAL_kaplan_meier', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
# 6 graphs on a 3x2 grid
par(mfrow=c(4,2))
# # Margins of the plots
par(mar=c(4.1, 4.1, 4.1, 2.1))
# First row
biopl_tcga$show_km_plot(km_ntp_sl, alg_name = 'a) NTP single-label')
biopl_tcga$show_km_plot(km_sl$svmLinear2, alg_name = 'b) LSVM single-label')
# Second row
biopl_tcga$show_km_plot(km_ntp_ml_primary, alg_name = 'c) NTP multi-label - primary')
biopl_tcga$show_km_plot(km_ml_primary$svmLinear2, alg_name = 'd) LSVM multi-label - primary')
biopl_tcga$show_km_plot(km_ntp_ml_secondary, alg_name = 'e) NTP multi-label - secondary')
biopl_tcga$show_km_plot(km_ml_secondary$svmLinear2, alg_name = 'f) LSVM multi-label - secondary')
# Third row
biopl_tcga$show_km_plot(km_ntp_ml, alg_name = 'g) NTP multi-label - all')
biopl_tcga$show_km_plot(km_ml_ref$svmLinear2, alg_name = 'h) LSVM multi-label - all')
dev.off()
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/scripts/kaplan_meier.r")
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/scripts/kaplan_meier.r")
biopl_tcga$show_km_plot_and_table(km_ntp_sl, alg_name = 'a) NTP single-label')
fname <- paste('LSVM single-label', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_sl$svmLinear2, alg_name = 'LSVM single-label')
dev.off()
fname <- paste('LSVM multi-label primary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_primary$svmLinear2, alg_name = 'LSVM multi-label - primary')
dev.off()
fname <- paste('LSVM multi-label secondary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_secondary$svmLinear2, alg_name = 'LSVM multi-label - secondary')
dev.off()
fname <- paste('LSVM multi-label all', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_ref$svmLinear2, alg_name = 'a) LSVM multi-label - all')
dev.off()
fname <- paste('LSVM single-label', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_sl$svmLinear2, alg_name = 'LSVM single-label')
dev.off()
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/scripts/kaplan_meier.r")
fname <- paste('LSVM single-label', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_sl$svmLinear2, alg_name = 'LSVM single-label')
dev.off()
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/scripts/kaplan_meier.r")
fname <- paste('LSVM single-label', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_sl$svmLinear2, alg_name = 'LSVM single-label')
dev.off()
fname <- paste('LSVM multi-label primary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_primary$svmLinear2, alg_name = 'LSVM multi-label - primary')
dev.off()
fname <- paste('LSVM multi-label secondary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_secondary$svmLinear2, alg_name = 'LSVM multi-label - secondary')
dev.off()
fname <- paste('LSVM multi-label all', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_ref$svmLinear2, alg_name = 'a) LSVM multi-label - all')
dev.off()
fname <- paste('LSVM single-label', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_sl$svmLinear2, alg_name = 'a) LSVM single-label')
dev.off()
fname <- paste('LSVM multi-label primary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_primary$svmLinear2, alg_name = 'c) LSVM multi-label - primary')
dev.off()
fname <- paste('LSVM multi-label secondary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_secondary$svmLinear2, alg_name = 'd) LSVM multi-label - secondary')
dev.off()
fname <- paste('LSVM multi-label all', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_ref$svmLinear2, alg_name = 'b) LSVM multi-label - all')
dev.off()
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/scripts/kaplan_meier.r")
fname <- paste('LSVM single-label', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_sl$svmLinear2, alg_name = 'a) LSVM single-label')
dev.off()
fname <- paste('LSVM multi-label primary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_primary$svmLinear2, alg_name = 'c) LSVM multi-label - primary')
dev.off()
fname <- paste('LSVM multi-label secondary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_secondary$svmLinear2, alg_name = 'd) LSVM multi-label - secondary')
dev.off()
fname <- paste('LSVM multi-label all', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_ref$svmLinear2, alg_name = 'b) LSVM multi-label - all')
dev.off()
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/scripts/kaplan_meier.r")
fname <- paste('LSVM single-label', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_sl$svmLinear2, alg_name = 'a) LSVM single-label')
dev.off()
fname <- paste('LSVM multi-label primary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_primary$svmLinear2, alg_name = 'c) LSVM multi-label - primary')
dev.off()
fname <- paste('LSVM multi-label secondary', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_secondary$svmLinear2, alg_name = 'd) LSVM multi-label - secondary')
dev.off()
fname <- paste('LSVM multi-label all', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
par(1,1)
biopl_tcga$show_km_plot_and_table(km_ml_ref$svmLinear2, alg_name = 'b) LSVM multi-label - all')
dev.off()
library(here)
source(here('src','load_libraries.r'))
source(here('src','utils','source_utils.r'))
source(here('src','loader_writer','load_data.r'))
source(here('src','data_management','source_data_management.r'))
load_pdx(original=TRUE, merged = TRUE)
View(Hbiod_MERGED_FILTERED)
load_pdx(filtered=FALSE, merged = TRUE)
View(Hbiod_MERGED_FILTERED)
load_pdx( merged = TRUE)
View(Hbiod_MERGED_FILTERED)
load_pdx(original = TRUE, batches = 1:6)
View(Hbiod1_LMX)
View(Hbiod1_LMX)
Hbiod1_LMX[["counts"]]@experimentData
Hbiod1_LMX[["counts"]]@assayData
View(Hbiod1_LMX)
Hbiod4_LMX <- readRDS("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/data/source_data/PDX_RNAseq_GRCh38/PDX_GRCH38/Hbiod4_LMX.rds")
View(Hbiod4_LMX)
Hbiod4_LMX_FILTERED <- readRDS("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/data/source_data/PDX_RNAseq_GRCh38/PDX_GRCH38/Hbiod4_LMX_FILTERED.rds")
View(Hbiod4_LMX_FILTERED)
View(Hbiod4_LMX)
Hbiod4_LMX[["counts"]]@featureData@data
Hbiod4_LMX[["counts"]]@assayData[["exprs"]]
View(Hbiod4_LMX)
View(Hbiod4_LMX_FILTERED)
View(Hbiod4_LMX)
View(Hbiod4_LMX_FILTERED)
View(Hbiod4_LMX)
Hbiod4_LMX_FILTERED[["counts"]]@assayData[["exprs"]]
View(Hbiod4_LMX)
View(Hbiod4_LMX_FILTERED)
View(Hbiod4_LMX)
# Handling of relative paths
library(here)
# Filtering function, pipe (%>%) etc.
library(tidyverse)
# Computation of CPM
library(edgeR)
# Expression sets
library(Biobase)
# Utilities (paths, print, constants etc.)
source(here('src', 'utils', 'source_utils.r'))
# Functions for loading/storing data
source(here('src', 'loader_writer', 'source_loader_writer.r'))
# Sample and features analysis, filtering, summaries
source(here('src', 'data_management', 'source_data_management.r'))
s_filt <- SamplesFilter$new()
in_folder  <- here('data/source_data/PDX')
out_folder <- here('data/source_data/PDX')
for (i in 1:N_PDX_BATCHES){
# pdx path
pdx_name  <- paste('Hbiod',i,'_LMX', sep = '')
file_name <- paste(pdx_name,'_new.rda', sep = '')
# Load data
load(paste(path_abs(in_folder), '/', file_name, sep = ''))
.pdx_clean <- list()
for (norm in c('counts','fpkm','tpm','cpm','tmm')){
# Get expression set of required normalization
expr_set  <- get(str_to_upper(norm), get(pdx_name))
expr_mat  <- expr_set@assayData$exprs
rownames(expr_mat) <- expr_set@featureData@data$Geneid
# Save updated expression set in list
.pdx_clean[[norm]] <- ExpressionSet(assayData = expr_mat)
}
rds_path <- paste(path_abs(out_folder), '/', pdx_name, '.rds', sep = '')
saveRDS(.pdx_clean, rds_path)
}
N_PDX_BATCHES <- 6
for (i in 1:N_PDX_BATCHES){
# pdx path
pdx_name  <- paste('Hbiod',i,'_LMX', sep = '')
file_name <- paste(pdx_name,'_new.rda', sep = '')
# Load data
load(paste(path_abs(in_folder), '/', file_name, sep = ''))
.pdx_clean <- list()
for (norm in c('counts','fpkm','tpm','cpm','tmm')){
# Get expression set of required normalization
expr_set  <- get(str_to_upper(norm), get(pdx_name))
expr_mat  <- expr_set@assayData$exprs
rownames(expr_mat) <- expr_set@featureData@data$Geneid
# Save updated expression set in list
.pdx_clean[[norm]] <- ExpressionSet(assayData = expr_mat)
}
rds_path <- paste(path_abs(out_folder), '/', pdx_name, '.rds', sep = '')
saveRDS(.pdx_clean, rds_path)
}
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/src/load_libraries.r")
# Handling of relative paths
library(here)
# Filtering function, pipe (%>%) etc.
library(tidyverse)
# Computation of CPM
library(edgeR)
# Expression sets
library(Biobase)
# Utilities (paths, print, constants etc.)
source(here('src', 'utils', 'source_utils.r'))
# Functions for loading/storing data
source(here('src', 'loader_writer', 'source_loader_writer.r'))
# Functions for loading/storing data
source(here('src', 'loader_writer', 'load_data.r'))
# Sample and features analysis, filtering, summaries
source(here('src', 'data_management', 'source_data_management.r'))
s_filt <- SamplesFilter$new()
View(s_filt)
g_filt <- GenesFilter$new()
sm_pdx <- SummaryMakerPDX$new()
load_features_grch38('PDX')
load_pdx(original = TRUE, batches = seq(N_PDX_BATCHES))
pdx_name <- lapply(seq(N_PDX_BATCHES),
function(b) {
paste("Hbiod", b, "_LMX", sep = "")
}) %>%
unlist()
.pdx_list    <- lapply(seq(N_PDX_BATCHES), function(b){get(pdx_name[b])$counts})
.batch_distr <- sm_pdx$batch_distribution(.pdx_list)
# Filter out useless technical replicas
best_tech    <- sm_pdx$select_technical_replicas(.batch_distr, by = 'reads')
# PDX preprocessor
pp <- PreprocessorPDX$new()
common_genes <- get_common_genes(pdx_name)
source(here('src', 'loader_writer', 'load_functions.r'))
# PDX preprocessor
pp <- PreprocessorPDX$new()
# Remove technical replicas from each batch
for (b in seq(N_PDX_BATCHES)){
prefilter_samples <- best_tech %>%  filter(batch == b) %>%
select(get('ALIQUOT_LABEL')) %>% unlist()
# add gene names to exprs and remove technical replicas from the batch
filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
# Create filtered expression set counts
assign(filt_names[b], ExpressionSet(assayData = filt_b_expr))
}
)
library(Biobase)
source(here('src/utils/source_utils.r'))
source(here('src/loader_writer/load_data.r'))
# Batches data and names
load_pdx(original = TRUE, batches = 1:N_PDX_BATCHES)
batches <- paste('Hbiod',1:N_PDX_BATCHES, '_LMX_ORIGINAL', sep = '')
# All batches and normalizations have the same genes
common_genes <-  get(batches[1])$counts@assayData$exprs %>% rownames()
batches <- paste('Hbiod',1:N_PDX_BATCHES, '_LMX', sep = '')
# All batches and normalizations have the same genes
common_genes <-  get(batches[1])$counts@assayData$exprs %>% rownames()
# Type of normalizations
norm    <- names(get(batches[1]))
# Merge the data
merged_pdx <- list()
for (n in norm)
merged_pdx[[n]] <- merge_pdx(batches,common_genes, n)
merged_pdx[[n]] <- merge_lists(batches,common_genes, n)
View(merged_pdx)
View(merged_pdx)
View(Hbiod1_LMX)
View(Hbiod1_LMX)
View(Hbiod2_LMX)
View(Hbiod3_LMX)
View(Hbiod4_LMX)
View(Hbiod5_LMX)
View(Hbiod6_LMX)
# Remove technical replicas from each batch
for (b in seq(N_PDX_BATCHES)){
prefilter_samples <- best_tech %>%  filter(batch == b) %>%
select(get('ALIQUOT_LABEL')) %>% unlist()
# add gene names to exprs and remove technical replicas from the batch
#filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
filt_b_expr <-  prefilter_samples
# Create filtered expression set counts
assign(filt_names[b], ExpressionSet(assayData = filt_b_expr))
}
#common_genes <- get_common_genes(pdx_name)
filt_names   <- paste(pdx_name, 'FILTERED', sep = '_')
#common_genes <- get_common_genes(pdx_name)
#filt_names   <- paste(pdx_name, 'FILTERED', sep = '_')
filt_names <- pdx_name
# Remove technical replicas from each batch
for (b in seq(N_PDX_BATCHES)){
prefilter_samples <- best_tech %>%  filter(batch == b) %>%
select(get('ALIQUOT_LABEL')) %>% unlist()
# add gene names to exprs and remove technical replicas from the batch
#filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
filt_b_expr <-  prefilter_samples
# Create filtered expression set counts
assign(filt_names[b], ExpressionSet(assayData = filt_b_expr))
}
View(best_tech)
get(pdx_name[b]
)
b <- 3
prefilter_samples <- best_tech %>%  filter(batch == b) %>%
select(get('ALIQUOT_LABEL')) %>% unlist()
View(Hbiod3_LMX)
View(best_tech)
# add gene names to exprs and remove technical replicas from the batch
sf <- SamplesFilter$new()
prefilter_samples <- best_tech %>%  filter(batch == b) %>%
select(get('ALIQUOT_LABEL')) %>% unlist()
# add gene names to exprs and remove technical replicas from the batch
#filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
filt_b_expr <- s_filt$filer_by_list(get(pdx_name[b]), prefilter_samples)
# add gene names to exprs and remove technical replicas from the batch
#filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
filt_b_expr <- s_filt$filter_by_list(get(pdx_name[b]), prefilter_samples)
get(pdx_name[b]
)
get(pdx_name[b])@assayData$exprs
View(Hbiod1_LMX)
H1biod1_LMX@assayData$exprs
Hbiod1_LMX@assayData$exprs
View(Hbiod1_LMX)
Hbiod1_LMX@counts@assayData$exprs
Hbiod1_LMX[["counts"]]@assayData[["exprs"]]
get(pdx_name[b])
et(pdx_name[b])$counts@assayData$exprs
get(pdx_name[b])$counts@assayData$exprs
# add gene names to exprs and remove technical replicas from the batch
#filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
filt_b_expr_counts <- s_filt$filter_by_list(get(pdx_name[b])$counts@assayData$exprs, prefilter_samples)
# Create filtered expression set counts
assign(filt_names[b], ExpressionSet(assayData = filt_b_expr_counts))
View(filt_b_expr_counts)
#common_genes <- get_common_genes(pdx_name)
#filt_names   <- paste(pdx_name, 'FILTERED', sep = '_')
filt_names <- pdx_name
# Remove technical replicas from each batch
for (b in seq(N_PDX_BATCHES)){
prefilter_samples <- best_tech %>%  filter(batch == b) %>%
select(get('ALIQUOT_LABEL')) %>% unlist()
# add gene names to exprs and remove technical replicas from the batch
#filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
filt_b_expr_counts <- s_filt$filter_by_list(get(pdx_name[b])$counts@assayData$exprs, prefilter_samples)
# Create filtered expression set counts
assign(filt_names[b], ExpressionSet(assayData = filt_b_expr_counts))
}
# Remove technical replicas from each batch
for (b in seq(N_PDX_BATCHES)){
prefilter_samples <- best_tech %>%  filter(batch == b) %>%
select(get('ALIQUOT_LABEL')) %>% unlist()
# add gene names to exprs and remove technical replicas from the batch
#filt_b_expr <- pp$prefilter(get(pdx_name[b]), prefilter_samples)
filt_b_expr_counts <- s_filt$filter_by_list(get(pdx_name[b])$counts$assayData$exprs, prefilter_samples)
# Create filtered expression set counts
assign(filt_names[b], ExpressionSet(assayData = filt_b_expr_counts))
}
# Handling of relative paths
library(here)
# Filtering function, pipe (%>%) etc.
library(tidyverse)
# Computation of CPM
library(edgeR)
# Expression sets
library(Biobase)
# Utilities (paths, print, constants etc.)
source(here('src', 'utils', 'source_utils.r'))
# Functions for loading/storing data
source(here('src', 'loader_writer', 'load_data.r'))
source(here('src', 'loader_writer', 'load_functions.r'))
# Sample and features analysis, filtering, summaries
source(here('src', 'data_management', 'source_data_management.r'))
s_filt <- SamplesFilter$new()
g_filt <- GenesFilter$new()
sm_pdx <- SummaryMakerPDX$new()
load_features_grch38('PDX')
load_pdx(original = TRUE, batches = seq(N_PDX_BATCHES))
pdx_name <- lapply(seq(N_PDX_BATCHES),
function(b) {
paste("Hbiod", b, "_LMX", sep = "")
}) %>%
unlist()
.pdx_list    <- lapply(seq(N_PDX_BATCHES), function(b){get(pdx_name[b])$counts})
library(here)
library(Biobase)
source(here('src/utils/source_utils.r'))
source(here('src/loader_writer/load_data.r'))
# Batches data and names
load_pdx(original = TRUE, batches = 1:N_PDX_BATCHES)
batches <- paste('Hbiod',1:N_PDX_BATCHES, '_LMX', sep = '')
# All batches and normalizations have the same genes
common_genes <-  get(batches[1])$counts@assayData$exprs %>% rownames()
# Type of normalizations
norm    <- names(get(batches[1]))
# Merge the data
merged_pdx <- list()
s_filt <- SamplesFilter$new()
source("~/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/src/load_libraries.r")
# Handling of relative paths
library(here)
# Filtering function, pipe (%>%) etc.
library(tidyverse)
# Computation of CPM
library(edgeR)
# Expression sets
library(Biobase)
# Utilities (paths, print, constants etc.)
source(here('src', 'utils', 'source_utils.r'))
# Functions for loading/storing data
source(here('src', 'loader_writer', 'load_data.r'))
source(here('src', 'loader_writer', 'load_functions.r'))
# Sample and features analysis, filtering, summaries
source(here('src', 'data_management', 'source_data_management.r'))
s_filt <- SamplesFilter$new()
g_filt <- GenesFilter$new()
sm_pdx <- SummaryMakerPDX$new()
load_features_grch38('PDX')
load_pdx(original = TRUE, batches = seq(N_PDX_BATCHES))
pdx_name <- lapply(seq(N_PDX_BATCHES),
function(b) {
paste("Hbiod", b, "_LMX", sep = "")
}) %>%
unlist()
.pdx_list    <- lapply(seq(N_PDX_BATCHES), function(b){get(pdx_name[b])$counts})
.batch_distr <- sm_pdx$batch_distribution(.pdx_list)
# Filter out useless technical replicas
best_tech    <- sm_pdx$select_technical_replicas(.batch_distr, by = 'reads')
library(xlsx)
write.txlsx(best_tech, 'list_of_samples_to_be_merged.xlsx')
write.xlsx(best_tech, 'list_of_samples_to_be_merged.xlsx')
load("C:/Users/silvi/Documents/GitHub/CRIS_single-sample - AFTER DEBUG -MEDIA-0.3166MEDIA/CRIS_single-sample/ENV_AFTER_RUNNING.RData")
View(Hbiod_MERGED_FILTERED)
colnames(Hbiod_MERGED_FILTERED)
saveRDS(Hbiod_MERGED_FILTERED, file='Hbiod_MERGED_FILTERED_606.rds')
load("C:/Users/silvi/Downloads/countsF.rda")
View(countF)
colnames(Hbiod_MERGED_FILTERED$counts)
Hbiod_MERGED_FILTERED$counts
colnames(Hbiod_MERGED_FILTERED$counts)
filter(Hbiod_MERGED_FILTERED$counts,
))
NTPClassifier
NTPClassifier$public_fields
NTPClassifier$private_fields
Hbiod_MERGED_FILTERED[["counts"]]@assayData[["exprs"]]
length(rownames(Hbiod_MERGED_FILTERED[["counts"]]@assayData[["exprs"]]))
countF[rownames(Hbiod_MERGED_FILTERED[["counts"]]@assayData[["exprs"]]),]
countF_FILTERED<-countF[rownames(Hbiod_MERGED_FILTERED[["counts"]]@assayData[["exprs"]]),]
View(countF_FILTERED)
countF_FILTERED<-countF_FILTERED[order(row.names(countF_FILTERED)),]
count_Hbiod_MERGED_FILTERED<-Hbiod_MERGED_FILTERED[["counts"]]@assayData[["exprs"]]
count_Hbiod_MERGED_FILTERED<-count_Hbiod_MERGED_FILTERED[order(row.names(count_Hbiod_MERGED_FILTERED))]
count_Hbiod_MERGED_FILTERED<-Hbiod_MERGED_FILTERED[["counts"]]@assayData[["exprs"]]
View(count_Hbiod_MERGED_FILTERED)
count_Hbiod_MERGED_FILTERED<-count_Hbiod_MERGED_FILTERED[order(row.names(count_Hbiod_MERGED_FILTERED)),]
identical(count_Hbiod_MERGED_FILTERED,countF_FILTERED)
load("C:/Users/silvi/Downloads/cpmF.rda")
View(cpmF)
cpmF_FILTERED<-cpmF[rownames(Hbiod_MERGED_FILTERED[["cpm"]]@assayData[["exprs"]]),]
cpm_Hbiod_MERGED_FILTERED<-Hbiod_MERGED_FILTERED[["cpm"]]@assayData[["exprs"]]
cpm_Hbiod_MERGED_FILTERED<-cpm_Hbiod_MERGED_FILTERED[order(row.names(cpm_Hbiod_MERGED_FILTERED))]
View(cpmF_FILTERED)
cpm_Hbiod_MERGED_FILTERED<-cpm_Hbiod_MERGED_FILTERED[order(row.names(cpm_Hbiod_MERGED_FILTERED)),]
count_Hbiod_MERGED_FILTERED<-Hbiod_MERGED_FILTERED[["counts"]]@assayData[["exprs"]]
count_Hbiod_MERGED_FILTERED<-count_Hbiod_MERGED_FILTERED[order(row.names(count_Hbiod_MERGED_FILTERED)),]
cpm_Hbiod_MERGED_FILTERED<-Hbiod_MERGED_FILTERED[["cpm"]]@assayData[["exprs"]]
cpm_Hbiod_MERGED_FILTERED<-cpm_Hbiod_MERGED_FILTERED[order(row.names(cpm_Hbiod_MERGED_FILTERED)),]
View(cpm_Hbiod_MERGED_FILTERED)
cpmF_FILTERED<-cpmF_FILTERED[order(row.names(cpmF_FILTERED)),]
identical(cpm_Hbiod_MERGED_FILTERED,cpm_FILTERED)
identical(cpm_Hbiod_MERGED_FILTERED,cpmF_FILTERED)
View(countF)
dim(countF)
load("C:/Users/silvi/Downloads/counts.rda")
View(counts)
dim(counts)
