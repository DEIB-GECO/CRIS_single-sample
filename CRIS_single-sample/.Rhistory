source('~/GitHub/CRIS_single-sample/CRIS_single-sample/src/install_libraries.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/src/load_libraries.r')
library(here)
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/src/load_libraries.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ntp_ml_thresholds.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_training.r')
warnings()
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_thresholds.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_thresholds.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_algorithm_adaptation_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_thresholds.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_thresholds.r')
path_loader$get_path('NTP_ONLY_SL_MODELS')
.thresholds_file
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_thresholds.r')
.thresholds_file
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_thresholds.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_thresholds.r')
.PUBLISHED_MODELS
path_loader$get_path('NTP_ONLY_SL_MODELS')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_testing.r')
load_file(path = .model_file)
path_loader$get_classifier_file_path('sl', .FS_TYPE, .TUNE, path_type = 'models')
path_loader$get_path('NTP_ONLY_SL_MODELS')
.SAVE
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_algorithm_adaptation_testing.r')
.PUBLISHED_MODELS
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_algorithm_adaptation_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_testing.r')
View(res_to_save)
View(models)
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_thresholds.r')
sl_thresholds_custom_tuned <- readRDS("~/GitHub/CRIS_single-sample/CRIS_single-sample/output/classifiers/ntp_only/thresholds/sl_thresholds_custom_tuned.rds")
View(threshold_res)
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_training.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_training.r')
View(models)
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_thresholds.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_thresholds.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_algorithm_adaptation_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_testing.r')
# Either tcga or pdx
.DATA  <- 'pdx'
# Either tcga or pdx
.DATA  <- 'tcga'
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/single_label_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_algorithm_adaptation_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/ml_problem_transformation_testing.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/kaplan_meier.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/forest_plots.R')
library(here)
source(here('src','load_libraries.r'))
source(here('src','utils','source_utils.r'))
source(here('src','loader_writer','load_data.r'))
source(here('src','data_management','source_data_management.r'))
source(here('src','classifiers','source_classifiers.r'))
source(here('src','pipelines','source_pipelines.r'))
source(here('src','biological_validation','source_biological_validation.r'))
# Data reading ------------------------------------------------------------
# Annotation and time window
annot_tcga <- load_file(path_loader$get_path('GMQL_GRCH38_ANNOT'))
# Objects that allows to draw kaplan meier
biopl_tcga <- BiologicalPlots$new(annotations = annot_tcga, xlim = .XLIM)
# Data reading ----------------------------------------------------------------
sldata <- load_prepared_tcga_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'sl')
mldata <- load_prepared_tcga_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'ml')
# Results reading ------------------------------------------------------------
sl_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'sl', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
ml_adapted_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'ml_alg_adapted', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
ml_pt_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'ml_problem_transformation', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
km_ntp_sl_ref <- biopl_tcga$ref_kaplan_meier(sldata$test_ref, type = 'ntp_sl', cl = 'CRIS-B')
km_ntp_ml_ref <- biopl_tcga$ref_kaplan_meier(mldata$test_ref, type = 'ntp_ml', cl = 'CRIS-B')
# NTP
km_ntp_sl <- biopl_tcga$compute_kaplan_meier(km_ntp_sl_ref, group = 'ref',cl = 'CRIS-B')
km_ntp_ml <- biopl_tcga$compute_kaplan_meier(km_ntp_ml_ref, group = 'ref',cl = 'CRIS-B')
km_ntp_ml_primary <- biopl_tcga$compute_kaplan_meier(km_ntp_ml_ref, group = 'is_primary',cl = 'CRIS-B')
# Single label
km_sl <- list()
for (m in names(sl_testing$results)){
.sl_res <- sl_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
}
# Multi-label algorithm adaptation
km_ml_ref <- list()
km_ml_primary <- list()
for (m in names(ml_adapted_testing$results)){
.ml_res <- ml_adapted_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.ml_res, type = 'aa_ml', cl = 'CRIS-B')
km_ml_ref[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
km_ml_primary[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'is_primary', cl = 'CRIS-B')
}
# Multi-label problem transformation
for (m in names(ml_pt_testing$results)){
.ml_res <- ml_pt_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.ml_res, type = 'pt_ml', cl = 'CRIS-B')
km_ml_ref[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
km_ml_primary[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'is_primary', cl = 'CRIS-B')
}
km_fold <- paste(path_loader$get_path('OUT_FOLDER_MODELS'), .FS_TYPE, 'kaplan_meier', sep = '/')
dir_create(km_fold)
fname <- paste('kaplan_meier', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
# 6 graphs on a 3x2 grid
par(mfrow=c(3,2))
# Margins of the plots
par(mar=c(5.1, 4.1, 4.1, 2.1))
# First row
biopl_tcga$show_km_plot(km_ntp_sl, alg_name = 'a) NTP single-label')
biopl_tcga$show_km_plot(km_sl$svmLinear2, alg_name = 'b) LSVM single-label')
# Second row
biopl_tcga$show_km_plot(km_ntp_ml_primary, alg_name = 'c) NTP multi-label - primary')
biopl_tcga$show_km_plot(km_ml_primary$svmLinear2, alg_name = 'd) LSVM multi-label - primary')
# Third row
biopl_tcga$show_km_plot(km_ntp_ml, alg_name = 'e) NTP multi-label - all')
biopl_tcga$show_km_plot(km_ml_ref$svmLinear2, alg_name = 'f) LSVM multi-label - all')
biopl_tcga$show_km_plot(km_ml_ref$ecc_lsvm, alg_name = 'g) ecc_lsvm multi-label - all')
biopl_tcga$show_km_plot(km_ml_primary$ecc_lsvm, alg_name = 'h) ecc_lsvm multi-label - primary')
dev.off()
km_fold <- paste(path_loader$get_path('OUT_FOLDER_MODELS'), .FS_TYPE, 'kaplan_meier', sep = '/')
dir_create(km_fold)
fname <- paste('kaplan_meier', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
# 6 graphs on a 3x2 grid
par(mfrow=c(3,2))
# Margins of the plots
par(mar=c(5.1, 4.1, 4.1, 2.1))
# First row
biopl_tcga$show_km_plot(km_ntp_sl, alg_name = 'a) NTP single-label')
biopl_tcga$show_km_plot(km_sl$svmLinear2$data, alg_name = 'b) LSVM single-label')
km_fold <- paste(path_loader$get_path('OUT_FOLDER_MODELS'), .FS_TYPE, 'kaplan_meier', sep = '/')
dir_create(km_fold)
fname <- paste('kaplan_meier', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
# 6 graphs on a 3x2 grid
par(mfrow=c(3,2))
# Margins of the plots
par(mar=c(5.1, 4.1, 4.1, 2.1))
# First row
biopl_tcga$show_km_plot(km_ntp_sl, alg_name = 'a) NTP single-label')
biopl_tcga$show_km_plot(km_sl$svmLinear2$data, alg_name = 'b) LSVM single-label')
dev.off()
km_fold <- paste(path_loader$get_path('OUT_FOLDER_MODELS'), .FS_TYPE, 'kaplan_meier', sep = '/')
dir_create(km_fold)
fname <- paste('kaplan_meier', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
# 6 graphs on a 3x2 grid
par(mfrow=c(3,3))
# Margins of the plots
par(mar=c(5.1, 4.1, 4.1, 2.1))
# First row
biopl_tcga$show_km_plot(km_ntp_sl, alg_name = 'a) NTP single-label')
biopl_tcga$show_km_plot(km_sl$svmLinear2$data, alg_name = 'b) LSVM single-label')
biopl_tcga$show_km_plot(km_sl$svmLinear2, alg_name = 'b) LSVM single-label')
km_fold <- paste(path_loader$get_path('OUT_FOLDER_MODELS'), .FS_TYPE, 'kaplan_meier', sep = '/')
dir_create(km_fold)
fname <- paste('kaplan_meier', .XLIM, '.jpeg', sep = '')
jpeg(paste(km_fold, fname, sep = '/'), width = 800, height = 800,quality = 100)
# 6 graphs on a 3x2 grid
par(mfrow=c(3,3))
# Margins of the plots
par(mar=c(5.1, 4.1, 4.1, 2.1))
# First row
biopl_tcga$show_km_plot(km_ntp_sl, alg_name = 'a) NTP single-label')
biopl_tcga$show_km_plot(km_sl$svmLinear2, alg_name = 'b) LSVM single-label')
km_sl$svmLinear2
km_ntp_sl
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/kaplan_meier.r')
library(here)
source(here('src','load_libraries.r'))
source(here('src','utils','source_utils.r'))
source(here('src','loader_writer','load_data.r'))
source(here('src','data_management','source_data_management.r'))
source(here('src','classifiers','source_classifiers.r'))
source(here('src','pipelines','source_pipelines.r'))
source(here('src','biological_validation','source_biological_validation.r'))
# Data reading ------------------------------------------------------------
# Annotation and time window
annot_tcga <- load_file(path_loader$get_path('GMQL_GRCH38_ANNOT'))
# Objects that allows to draw kaplan meier
biopl_tcga <- BiologicalPlots$new(annotations = annot_tcga, xlim = .XLIM)
# Data reading ----------------------------------------------------------------
sldata <- load_prepared_tcga_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'sl')
mldata <- load_prepared_tcga_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'ml')
# Results reading ------------------------------------------------------------
sl_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'sl', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
ml_adapted_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'ml_alg_adapted', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
ml_pt_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'ml_problem_transformation', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
# References for kaplan meier -----------------------------------------------
km_ntp_sl_ref <- biopl_tcga$ref_kaplan_meier(sldata$test_ref, type = 'ntp_sl', cl = 'CRIS-B')
km_ntp_ml_ref <- biopl_tcga$ref_kaplan_meier(mldata$test_ref, type = 'ntp_ml', cl = 'CRIS-B')
# Computation of the Kaplan Meier ------------------------------------------
# NTP
km_ntp_sl <- biopl_tcga$compute_kaplan_meier(km_ntp_sl_ref, group = 'ref',cl = 'CRIS-B')
km_ntp_ml <- biopl_tcga$compute_kaplan_meier(km_ntp_ml_ref, group = 'ref',cl = 'CRIS-B')
km_ntp_ml_primary <- biopl_tcga$compute_kaplan_meier(km_ntp_ml_ref, group = 'is_primary',cl = 'CRIS-B')
# Single label
km_sl <- list()
for (m in names(sl_testing$results)){
.sl_res <- sl_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
}
# Multi-label algorithm adaptation
km_ml_ref <- list()
km_ml_primary <- list()
for (m in names(ml_adapted_testing$results)){
.ml_res <- ml_adapted_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.ml_res, type = 'aa_ml', cl = 'CRIS-B')
km_ml_ref[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
km_ml_primary[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'is_primary', cl = 'CRIS-B')
}
# Multi-label problem transformation
for (m in names(ml_pt_testing$results)){
.ml_res <- ml_pt_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.ml_res, type = 'pt_ml', cl = 'CRIS-B')
km_ml_ref[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
km_ml_primary[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'is_primary', cl = 'CRIS-B')
}
km_ntp_sl
View(km_sl)
sl_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
View(sl_testing)
View(km_sl)
View(km_ntp_sl)
View(km_sl)
View(km_ml_primary)
sl_testing$results
biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
.ml_res <- ml_adapted_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.sl_res <- sl_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
ALIQUOT_LABEL
sl_testing$results[[m]]$binary_res
View(fixed_p)
View(sl_testing)
sl_testing[["results"]][["svmLinear2"]][["binary_res"]]
sl_testing$results
names(sl_testing$results)
# Single label
km_sl <- list()
for (m in names(sl_testing$results)){
.sl_res <- sl_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
}
sl_testing$results[[m]]$binary_res
.sl_res <- sl_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
.sl_res
View(km_sl)
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/kaplan_meier.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/kaplan_meier.r')
library(here)
source(here('src','load_libraries.r'))
source(here('src','utils','source_utils.r'))
source(here('src','loader_writer','load_data.r'))
source(here('src','data_management','source_data_management.r'))
source(here('src','classifiers','source_classifiers.r'))
source(here('src','pipelines','source_pipelines.r'))
source(here('src','biological_validation','source_biological_validation.r'))
# Data reading ------------------------------------------------------------
# Annotation and time window
annot_tcga <- load_file(path_loader$get_path('GMQL_GRCH38_ANNOT'))
# Objects that allows to draw kaplan meier
biopl_tcga <- BiologicalPlots$new(annotations = annot_tcga, xlim = .XLIM)
# Data reading ----------------------------------------------------------------
sldata <- load_prepared_tcga_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'sl')
mldata <- load_prepared_tcga_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'ml')
# Results reading ------------------------------------------------------------
sl_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'sl', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
ml_adapted_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'ml_alg_adapted', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
ml_pt_testing <- load_file(
path = path_loader$get_classifier_file_path(
type    = paste(.DATA, 'ml_problem_transformation', sep = '_'),
fs_type = .FS_TYPE,
tuned =  .TUNE,
path_type = 'testing',
testing_folder = .DATA)
)
# References for kaplan meier -----------------------------------------------
km_ntp_sl_ref <- biopl_tcga$ref_kaplan_meier(sldata$test_ref, type = 'ntp_sl', cl = 'CRIS-B')
km_ntp_ml_ref <- biopl_tcga$ref_kaplan_meier(mldata$test_ref, type = 'ntp_ml', cl = 'CRIS-B')
# Computation of the Kaplan Meier ------------------------------------------
# NTP
km_ntp_sl <- biopl_tcga$compute_kaplan_meier(km_ntp_sl_ref, group = 'ref',cl = 'CRIS-B')
km_ntp_ml <- biopl_tcga$compute_kaplan_meier(km_ntp_ml_ref, group = 'ref',cl = 'CRIS-B')
km_ntp_ml_primary <- biopl_tcga$compute_kaplan_meier(km_ntp_ml_ref, group = 'is_primary',cl = 'CRIS-B')
# Single label
km_sl <- list()
for (m in names(sl_testing$results)){
.sl_res <- sl_testing$results[[m]][[binary_res]] %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
}
# Single label
km_sl <- list()
for (m in names(sl_testing$results)){
.sl_res <- sl_testing[[results]][[m]][[binary_res]] %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
}
# Single label
km_sl <- list()
for (m in names(sl_testing$results)){
.sl_res <- sl_testing$results[[m]]$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
.km_ref <- biopl_tcga$ref_kaplan_meier(.sl_res, type = 'sl', cl = 'CRIS-B')
km_sl[[m]] <- biopl_tcga$compute_kaplan_meier(.km_ref, group = 'ref', cl = 'CRIS-B')
}
View(sl_testing)
library(here)
library(tidyverse)
# Read the comparison file
path <- here("additional files/Compare_ntp_only.xlsx")
ref  <- readxl::read_excel(path, sheet = 2)
View(km_ntp_sl)
View(km_sl)
View(sl_testing)
sl_testing[["results"]][["svmLinear2"]][["binary_res"]]
View(sl_testing[["results"]][["svmLinear2"]][["binary_res"]])
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/kaplan_meier.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/kaplan_meier.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/forest_plots.R')
View(ntp_ml_forest_plots)
openxlsx::write.xlsx(sl_forest_plots, here('sl_forest_plots.xlsx'))
openxlsx::write.xlsx(ntp_sl_forest_plots, here('ntp_sl_forest_plots.xlsx'))
openxlsx::write.xlsx(ntp_ml_forest_plots[which(ntp_ml_forest_plots$Y %% 2 != 0), ], here('ntp_ml_primary_forest_plots.xlsx'))
openxlsx::write.xlsx(ntp_ml_forest_plots[which(ntp_ml_forest_plots$Y %% 2 == 0), ], here('ntp_ml_all_forest_plots.xlsx'))
openxlsx::write.xlsx(ml_forest_plots[which(ml_forest_plots$Y %% 2 == 0), ], here('ml_aa_all_forest_plots.xlsx'))
openxlsx::write.xlsx(ml_forest_plots[which(ml_forest_plots$Y %% 2 != 0), ], here('ml_aa_primary_forest_plots.xlsx'))
View(ml_forest_plots)
View(ml_forest_plots)
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/GenerateLatexTable.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/GenerateLatexTable.r')
library(here)
source(here('src','load_libraries.r'))
source(here('src','utils','source_utils.r'))
source(here('src','loader_writer','load_data.r'))
source(here('src','data_management','source_data_management.r'))
source(here('src','classifiers','source_classifiers.r'))
source(here('src','pipelines','source_pipelines.r'))
source(here('src','biological_validation','source_biological_validation.r'))
tsp_data <- load_prepared_tcga_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'cris',
samples_filter = load_tcga_testing_samples(),
load_training = FALSE)
tsp_res <- tsp_pipeline(tsp_data)
print(tsp_res$metrics)
tsp_all <- load_prepared_tcga_data(confident = 'all',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'cris')
tsp_res_all <- tsp_pipeline(tsp_all)
print(tsp_res_all$metrics)
# Object that handles the Kaplan Meier computation
annot <- load_file(path_loader$get_path('GMQL_GRCH38_ANNOT'))
biopl <- BiologicalPlots$new(annotations = annot, xlim = 36)
# Prepare the data for Kaplan Meier
ref   <- tsp_res$binary_res %>% rownames_to_column(ALIQUOT_LABEL)
km_tsp_ref <- biopl$ref_kaplan_meier(ref, type = 'sl', cl = 'CRIS-B')
# Compute the Kaplan Meier
km_tsp <- biopl$compute_kaplan_meier(km_tsp_ref, group = 'ref',cl = 'CRIS-B')
# Show the plot
biopl$show_km_plot(km_tsp, alg_name = 'tsp')
# Create the annotation object and read the annotations
ann      <- AnnotationTCGA$new()
annot    <- load_file(path_loader$get_path('GMQL_GRCH38_ANNOT'))
# Get count of each variable (used to build contingency tabel of fisher tests) and perform fisher tests
count_tsp <- ann$get_count_annot_sl(tsp_res, annot, 'sl')
tests_tsp <- ann$perform_stat_tests(count_tsp)
# Read PDX data
crisdata_pdx <- load_prepared_pdx_data(confident = 'conf',
uniformed = TRUE,
fs_type = 'ntp_only',
type = 'cris')
# Apply the classifier on PDX data
tsp_pdx <- tsp_pipeline(crisdata_pdx)
print(tsp_pdx$metrics)
# Create the annotation object and read the annotations
ann_pdx   <- AnnotationPDX$new()
annot_pdx <- load_file(path_loader$get_path('PDX_MERGED_ANNOT'))
# Get count of each variable (used to build contingency table of fisher tests) and perform fisher tests
count_tsp_pdx <- ann_pdx$get_count_annot_sl(tsp_pdx, annot_pdx, 'sl')
tests_tsp_pdx <- ann_pdx$perform_stat_tests(count_tsp_pdx)
biopl <- BiologicalPlots$new(annotations = annot)
tsp_forest_plots <- biopl$compute_all_forest_plots(.FOREST_ATTRIBUTES$tcga,
.FOREST_LABEL_ATTRIBUTES$tcga,
.FOREST_CLASSES,
tests_tsp)
biopl_pdx <- BiologicalPlots$new(annotations = annot_pdx)
tsp_forest_plots_pdx <- biopl$compute_all_forest_plots(.FOREST_ATTRIBUTES$pdx,
.FOREST_LABEL_ATTRIBUTES$pdx,
.FOREST_CLASSES,
tests_tsp_pdx,
max(tsp_forest_plots$Y)+1)
tsp_forest_plots <- tsp_forest_plots %>% rbind(tsp_forest_plots_pdx)
openxlsx::write.xlsx(tsp_forest_plots, here('tsp_forest_plots.xlsx'))
View(tsp_res)
View(tsp_pdx)
View(tsp_pdx)
View(tsp_res)
View(tsp_res)
tsp_res[["metrics"]][["local"]][["Metric"]]
View(tsp_res[["metrics"]][["local"]])
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/GenerateLatexTable.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/GenerateLatexTable.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/GenerateLatexTable.r')
source('~/GitHub/CRIS_single-sample/CRIS_single-sample/scripts/GenerateLatexTable.r')
